From 212697a215476bd26331a4e70f7dc11ed35eed1e Mon Sep 17 00:00:00 2001
From: EJ <ejc3@yahoo-inc.com>
Date: Wed, 30 Oct 2013 04:24:22 -0700
Subject: [PATCH 1/3] Update connection.js to support a "shutdown" command

This change adds a shutdown method that indicates to socketDrained that it should close connections once there are no more notifications to send. The side effect is that the node process will end. I've tested the change both with all successful messages, as well as when a few messages can't be sent. In both cases, the program does not shutdown until all messages that can be successfully sent our sent.
---
 lib/connection.js | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/lib/connection.js b/lib/connection.js
index b924b80..3728bb5 100644
--- a/lib/connection.js
+++ b/lib/connection.js
@@ -84,6 +84,9 @@ function Connection (options) {
 
 	this.socketId = 0;
 
+	// when true, we end all sockets after the pending notifications reach 0
+	this.shutdownPending = false;
+
 	events.EventEmitter.call(this);
 }
 
@@ -99,7 +102,7 @@ Connection.prototype.checkInitialized = function () {
 };
 
 /**
- * You should never need to call this method, initialisation and connection is handled by {@link Connection#sendNotification}
+ * You should never need to call this method, initialization and connection is handled by {@link Connection#sendNotification}
  * @private
  */
 Connection.prototype.initialize = function () {
@@ -346,7 +349,7 @@ Connection.prototype.socketDrained = function(socket, serviceBuffer) {
 	socket.busy = false;
 	if(this.options.enhanced) {
 		var notification = socket.cachedNotifications[socket.cachedNotifications.length - 1];
-		this.emit('transmitted', notification.notification, notification.recipient);
+		this.emit('transmitted', notification.notification, notification.recipient, socket);
 	}
 	if(serviceBuffer === true && !this.runningOnNextTick) {
 		// There is a possibility that this could add multiple invocations to the 
@@ -362,6 +365,12 @@ Connection.prototype.socketDrained = function(socket, serviceBuffer) {
 		}
 		this.runningOnNextTick = true;
 	}
+	if (this.notificationBuffer.length === 0 && this.shutdownPending) {
+		debug("closing connections");
+		for (var i = this.sockets.length - 1; i >= 0; i--) {
+			this.sockets[i].end();
+		}
+	}
 };
 
 /**
@@ -704,4 +713,11 @@ Connection.prototype.sendNotification = function (notification) {
 	return this.pushNotification(notification, notification.device);
 };
 
+/**
+ * End connetions with APNS once we've finished sending all notifications
+ */
+Connection.prototype.shutdown = function () {
+	this.shutdownPending = true;
+};
+
 module.exports = Connection;
-- 
1.8.4


From 57747065665394275a7f5128c0dbf339ea2d22a8 Mon Sep 17 00:00:00 2001
From: EJ <ejc3@yahoo-inc.com>
Date: Wed, 30 Oct 2013 04:34:04 -0700
Subject: [PATCH 2/3] cleaned up extra param

---
 lib/connection.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/connection.js b/lib/connection.js
index 3728bb5..6ef5d6b 100644
--- a/lib/connection.js
+++ b/lib/connection.js
@@ -349,7 +349,7 @@ Connection.prototype.socketDrained = function(socket, serviceBuffer) {
 	socket.busy = false;
 	if(this.options.enhanced) {
 		var notification = socket.cachedNotifications[socket.cachedNotifications.length - 1];
-		this.emit('transmitted', notification.notification, notification.recipient, socket);
+		this.emit('transmitted', notification.notification, notification.recipient);
 	}
 	if(serviceBuffer === true && !this.runningOnNextTick) {
 		// There is a possibility that this could add multiple invocations to the 
-- 
1.8.4


From 4c7c3cac47bbbd1cb9e54310635ae43e766dc8a2 Mon Sep 17 00:00:00 2001
From: EJ <ejc3@yahoo-inc.com>
Date: Wed, 30 Oct 2013 04:46:10 -0700
Subject: [PATCH 3/3] Update connection.js

fix spelling mistake
---
 lib/connection.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/connection.js b/lib/connection.js
index 6ef5d6b..3746542 100644
--- a/lib/connection.js
+++ b/lib/connection.js
@@ -714,7 +714,7 @@ Connection.prototype.sendNotification = function (notification) {
 };
 
 /**
- * End connetions with APNS once we've finished sending all notifications
+ * End connections with APNS once we've finished sending all notifications
  */
 Connection.prototype.shutdown = function () {
 	this.shutdownPending = true;
-- 
1.8.4

